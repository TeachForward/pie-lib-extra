#!/usr/bin/env node
const _ = require('lodash');
const debug = require('debug');
const log = debug('pie-element:scripts:build');
const minimist = require('minimist');
const { Commands } = require('@pie-framework/build-helper');
const args = minimist(process.argv.slice(2));
const { resolve } = require('path');

class LibCommands extends Commands {

  async build() {
    await this.clean();
    await this.lint();
    await this.babel();
    // await this.test();
  }

  async release() {
    const { GITHUB_TOKEN } = process.env;


    if (GITHUB_TOKEN) {

      const ciVars = {
        branch: 'main',
        username: 'tf-ops-item',
        email: 'ops+item-author@teachforward.com',
        repo: 'TeachForward/pie-lib-extra'
      };

      log(
        '-----> running in GithubWorkflows - checkout the branch (detached head doesnt work with lerna)'
      );
      if (ciVars) {
        await this.runCmds([
          `git remote set-url origin https://${GITHUB_TOKEN}@github.com/${ciVars.repo}.git`,
          `git checkout ${ciVars.branch}`,
          'git rev-parse --short HEAD',
          `git config user.name "${ciVars.username}"`,
          `git config user.email "${ciVars.email}"`,
        ]);
      }

      await this.runCmds([`git status`]);
    }

    await this.build();

    if (!this.args.skipPublishHooks) {
      await this.beforePublish();
      log('beforePublish - done...');
    }

    const releaseCmd = `${
      this.p.lerna
    } publish from-package --conventional-commits --no-verify-access ${
      this.args.lernaLogLevel ? `--loglevel ${this.args.lernaLogLevel}` : ''
    } ${this.args.interactive ? '' : '--yes'}`;

    await this.runCmds([releaseCmd]);

    if (!this.args.skipPublishHooks) {
      await this.afterPublish();
    }
    const branchToPush = ciVars ? ciVars.branch : getCurrentBranch();
    // push to the branch
    await this.runCmd(`git push origin ${branchToPush}`);
  }
}

const cmds = new LibCommands(resolve(__dirname, '..'), args);

cmds
  .execute()
  .then(() => {
    console.log('all done');
    process.exit(0);
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
